library("imputeTS")
library('astsa')
library('readxl')
library('dplyr')
library('forecast')
library('TSA')

Daglig_data <- read_excel("C:/Users/nanna/OneDrive/Skrivebord/6. semester/Projekt/210215 Datagrundlag - Daglig forecast - projekt 1.xlsx", 
                         sheet = "Data", skip = 1)

################################################################### 830345 NettoDK
Daglig_830345 <- Daglig_data %>% filter(Kunde == "NettoDK",Vare=="830345")
Daglig_830345 <- Daglig_830345[order(as.Date(Daglig_830345$Dato, format="%Y/%m/%d")),]

#Salgvektorer
Salg_830345 <-  ts(Daglig_830345$SalgKolli, frequency = 365, start = c(2019, 1)); 
Salg_830345 <- na.interpolation(Salg_830345) #Erstatter NA med gennemsnit af værdien før og efter.

#Plot salg 
plot.ts(Salg_830345, type='l', main = "830345 NettoDK", ylab = "Salg", xlab= "Dato") # Figur 1
plot.ts(log(Salg_830345), type='l', main = "830345 NettoDK", ylab = "Salg", xlab= "Dato") # Figur 2

#ACF og PACF
acf2(as.vector(log(Salg_830345)),max.lag=50) #Figur 3

#Undersøger 7. differens
Salg_830345_7 <- diff(log(Salg_830345),7);
plot(Salg_830345_7) #Figur 4
acf2(as.vector(Salg_830345_7),max.lag=50) #Figur 5
#Ligner p=2,q=2. Vi ved ikke, hvordan vi skal aflæse P og Q. D er 1. 
#Vi har i det vi havde sendt sagt p=2 og q=3, men det var fordi vi så på det forkerte acf plot.


#Find AIC når Q=0
for (i in 0:7){
  print(arima(log(Salg_830345), order = c(2,0,2),seasonal = list(order=c(i,1,0),period=7))$aic)
} #Lavest hvis P=7

#Find AIC når Q=1
for (i in 0:7){
  print(arima(log(Salg_830345), order = c(2,0,2),seasonal = list(order=c(i,1,1),period=7))$aic)
} #Lavest hvis P=4

#Find AIC når Q=2
for (i in 0:7){
  print(arima(log(Salg_830345), order = c(2,0,2),seasonal = list(order=c(i,1,2),period=7))$aic)
} #Lavest hvis P=4

#Find AIC når Q=3
for (i in 0:7){
  print(arima(log(Salg_830345), order = c(2,0,2),seasonal = list(order=c(i,1,3),period=7))$aic)
} #Lavest hvis P=3

#Indtil nu er den bedste P=3, Q=3
sarima(log(Salg_830345), p=2,d=0,q=2,P=3,D=1,Q=3,S=7) #Tilsvarende figur 6



#################################################################### 855131 Lidl
Daglig_855131 <- Daglig_data %>% filter(Kunde == "Lidl",Vare=="855131")
Daglig_855131 <- Daglig_855131[order(as.Date(Daglig_855131$Dato, format="%Y/%m/%d")),]
#Salgvektorer
Salg_855131 <-  ts(Daglig_855131$SalgKolli, frequency = 365, start = c(2019, 1)); 
Salg_855131 <- na.interpolation(Salg_855131) #Erstatter NA med gennemsnit af værdien før og efter.
#Plot salg 
plot.ts(Salg_855131, type='l', main = "855131 Lidl", ylab = "Salg", xlab= "Dato")
plot.ts(log(Salg_855131), type='l', main = "855131 Lidl", ylab = "Salg", xlab= "Dato")
plot.ts(diff(log(Salg_855131)), type='l', main = "855131 Lidl", ylab = "Salg", xlab= "Dato")
#Prognose
Prog_ejkamp_855131 <-ts(Daglig_855131$ProgKolliEjKamp, frequency = 365, start = c(2019, 1)) #Alm. prognose
Prog_kamp_855131 <- ts(Daglig_855131$ProgKolliKamp, frequency = 365, start = c(2019, 1)) #Prognose kamp.
Prog_kamp_855131 <- na_replace(Prog_kamp_855131,0)
Prog_855131 <- Prog_ejkamp_855131 + Prog_kamp_855131;
plot.ts(Prog_855131, type='l', main = "855131 Lidl", ylab = "Salg", xlab= "Dato")
#Plot prognose og salg i samme plot 
ts.855131 <- cbind(Prog_855131, Salg_855131)
plot.ts(ts.855131, plot.type = "single", col = c("orange","lightblue"), 
        ylab = "Salg og prognose", main="855131 Lidl")
#Undersøg acf og pacf for salg
par(bg = 'black', fg = 'white',  col.lab="white",  col.main="white", col.axis = 'white', col="orange")
acf2(as.vector(diff(log(Salg_855131))), max.lag = 30) 


#### 852087 Dansk Supermarked ####
Daglig_852087 <- Daglig_data %>% filter(Kunde == "DS",Vare=="852087")
Daglig_852087 <- Daglig_852087[order(as.Date(Daglig_852087$Dato, format="%Y/%m/%d")),]

#Salgvektorer
Salg_852087 <-  ts(Daglig_852087$SalgKolli, frequency = 365, start = c(2019, 1)); 
Salg_852087 <- na_interpolation(Salg_852087) #Erstatter NA med gennemsnit af værdien før og efter.

#Plot salg 
plot.ts(Salg_852087, type='l', main = "852087 DS", ylab = "Salg", xlab= "Dato")
plot.ts(log(Salg_852087), type='l', main = "852087 DS", ylab = "Salg", xlab= "Dato")
plot.ts(diff(log(Salg_852087)), type='l', main = "852087 DS", ylab = "Salg", xlab= "Dato")

#Prognose
Prog_ejkamp_852087 <-ts(Daglig_852087$ProgKolliEjKamp, frequency = 365, start = c(2019, 1)) #Alm. prognose
Prog_kamp_852087 <- ts(Daglig_852087$ProgKolliKamp, frequency = 365, start = c(2019, 1)) #Prognose kamp.
Prog_kamp_852087 <- na_replace(Prog_kamp_852087,0)
Prog_852087 <- Prog_ejkamp_852087 + Prog_kamp_852087;
plot.ts(Prog_852087, type='l', main = "852087 DS", ylab = "Salg", xlab= "Dato")

#Plot prognose og salg i samme plot 
ts.852087 <- cbind(Prog_852087, Salg_852087)
plot.ts(ts.852087, plot.type = "single", col = c("orange","lightblue"), 
        ylab = "Salg og prognose", main="852087 DS")

#Undersøg acf og pacf for salg
par(bg = 'black', fg = 'white',  col.lab="white",  col.main="white", col.axis = 'white', col="orange")
acf2(as.vector(diff(log(Salg_852087))), max.lag = 30) #Muligvis sæson på 6


acf(Salg_852087, lag.max=200)
pacf(Salg_852087, lag.max=200)

acf(log(Salg_852087))
pacf(log(Salg_852087))

acf(diff(log(Salg_852087)))
pacf(diff(log(Salg_852087)))
