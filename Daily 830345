library("imputeTS")
library('astsa')
library('readxl')
library('dplyr')
library('forecast')
library('TSA')
library('zoo')
library("MTS")
library("lubridate")


Daglig_data <- read_excel("C:/Users/Bruger/Dropbox/Min computer (DESKTOP-958HVSH)/Desktop/210215 Datagrundlag - Daglig forecast - projekt 1(uændret).xlsx", 
                          sheet = "Data", skip = 1)


################################################################### 830345 NettoDK
Daglig_830345 <- Daglig_data %>% filter(Kunde == "NettoDK",Vare=="830345")
Daglig_830345 <- Daglig_830345[order(as.Date(Daglig_830345$Dato, format="%Y/%m/%d")),]

#Salgvektorer
Salg_830345 <-  ts(Daglig_830345$SalgKolli, frequency = 365, start = c(2019, 1)); 
Salg_830345 <- na_interpolation(Salg_830345) #Erstatter NA med gennemsnit af værdien før og efter.

lSalg_830345 <- log(Salg_830345)
lSalg_830345 <- na_interpolation(lSalg_830345)

#Plot salg 
plot.ts(Salg_830345, type='l', main = "830345 NettoDK", ylab = "Salg", xlab= "Dato")
plot.ts(log(Salg_830345), type='l', main = "830345 NettoDK", ylab = "Salg", xlab= "Dato")
acf2(as.vector(log(Salg_830345)))
plot.ts(diff(Salg_830345), type='l', main = "830345 NettoDK", ylab = "Salg", xlab= "Dato")
#Dato vektor
dato.830345 <- Daglig_830345$Dato; dato.830345

#Prognose
Prog_ejkamp_830345 <-ts(Daglig_830345$ProgKolliEjKamp, frequency = 365, start = c(2019, 1)) #Alm. prognose
Prog_kamp_830345 <- ts(Daglig_830345$ProgKolliKamp, frequency = 365, start = c(2019, 1)) #Prognose kamp.
Prog_kamp_830345 <- na_replace(Prog_kamp_830345,0)
Prog_830345 <- Prog_ejkamp_830345 + Prog_kamp_830345;Prog_830345 #Det sidste 0 forecast i starten af tidsrækken forekommer ved indeks 390
lProg_830345 <- log(Prog_830345)
repinf = which(lProg_830345==-Inf);repinf
lProg_830345 <- replace(lProg_830345,repinf, c(rep(NaN, length(repinf))))
lProg_830345 <- na_interpolation(lProg_830345)

plot.ts(Prog_830345, type='l', main = "830345 NettoDK", ylab = "Salg", xlab= "Dato") # Plot af prognosen fra Danp0
#Plot prognose og salg i samme plot 
ts.830345 <- cbind(Prog_830345, Salg_830345)
plot.ts(ts.830345, plot.type = "single", col = c("green","black"), 
        ylab = "Salg og prognose", main="830345 NettoDK")
legend("topleft", legend=c("Realised Sale", "Forecasted Sale"),
       col=c("black", "green"), lty=1:2, cex=0.8)
as.numeric(time(log(Salg_830345)))#Indeks 391 bestemmes. Det er her vi starter tidsrækken fra
abline(v=2020.068,col="red")# Linjen på plottet viser, hvornår vi starter vores analyse

#Datasættet forkortes på grund af de knap så præcise prognoser i starten af tidsrækken
ts.830345.shorter <- ts(cbind(Prog_830345[391:762], Salg_830345[391:762]), frequency = 365, start =c(2020,26))
plot.ts(ts.830345.shorter, plot.type = "single", col = c("green","black"), 
        ylab = "Salg og prognose", main="830345 NettoDK")
legend("topleft", legend=c("Realised Sale", "Forecasted Sale"),
       col=c("black", "green"), lty=1:2, cex=0.6)
# Definer Salg og Prognose for den kortere periode
salg.830345_ts <- ts(lSalg_830345[391:762], frequency = 365, start =c(2020,26))
prog.830345_ts <- ts(lProg_830345[391:762], frequency = 365, start =c(2020,26))

#######################################################################
#PREWHITENING
#######################################################################
############ testsæt ################################
#Split data til train og test sæt. Vi fjerner de første, da prognosen er dårlig.
salg.830345_train <- window(salg.830345_ts,start=c(2020,25), end=c(2020,365));salg.830345_train
salg.830345_test <- window(salg.830345_ts, start=c(2021,0));salg.830345_test

prog.830345_train <- window(prog.830345_ts,start=c(2020,25), end=c(2020,365));prog.830345_train
prog.830345_test <- window(prog.830345_ts, start=c(2021,0));prog.830345_test
########################################################

########## Tjek CCF ####################################
ccf2(as.vector(salg.830345_train),as.vector(prog.830345_train))
#Der er korolationer, så prewhiten. 

#################### Prewhitening #######################
#Først skal input-tidsrækken mean korregeres:
new.prog.830345 = prog.830345_train - mean(prog.830345_train)
# En arima for input-tidsrækken:
input.model.830345 = auto.arima(new.prog.830345, trace=TRUE);
input.model.830345 #(2,0,0)
#Modeltjek
tsdiag(input.model.830345)
checkresiduals(input.model.830345)

##########################  Prewhiten  ##################
#Gem relevante coefficienter fra modellen 
ar1.830345 =-input.model.830345$coef[1]; ar1.830345
ar2.830345 =-input.model.830345$coef[2]; ar2.830345

#CCF ved brug af prewhiten funktionen. Den er anderledes end den vi finder ved at prewhitene vha filter funktionen
prewhiten(new.prog.830345,salg.830345_train,x.model = input.model.830345)
#The CCF indicates that the prognosis at lag 0 is relevant

#Lagged regression model
model = lm(salg.830345_train~new.prog.830345)
summary (model)# R^2=0.2477 Modellen er ikke god
acf2(residuals(model)) # ACF for residualerne ligner en AR(1) process


### Lineære regressionsmodeller med autoregressive fejl ###
#Kilde:  https://online.stat.psu.edu/stat510/lesson/8/8.1

#Determine regression models
model = lm(salg.830345_train~new.prog.830345) # Bemærk samme model som lagged  ved regression
summary (model)# R^2=0.2477 Modellen er ikke god
acf2(residuals(model)) # ACF for residualerne ligner en AR(1) process
rm= residuals(model)
AR.resid = auto.arima(rm);AR.resid # Bestem AR(1) process for residualerne
#Check modellen for residualerne
tsdiag(AR.resid)
checkresiduals(AR.resid) # Overordnet set er modellen acceptabel
#Adjust the model using Cochrane-Orcutt
xl = ts.intersect(new.prog.830345, stats::lag(new.prog.830345,-1)) # Konstruer matrix med x og lag 1 x som elementer
xnew=xl[,1] - AR.resid$coef*xl[,2] # Konstruer x variabel for justeret regression
yl = ts.intersect(salg.830345_train,stats::lag(salg.830345_train,-1)) # Konstruer matrix med y og lag 1 y som elementer
ynew=yl[,1]-AR.resid$coef*yl[,2] # Konstruer y variabel for justeret regression

Adj.model = lm(ynew~xnew) # Justeret regression
summary(Adj.model)
acf2(residuals(Adj.model))
install.packages("orcutt")
library(orcutt)
cochrane.orcutt(model)
summary(cochrane.orcutt(model))#Modellen er stadig elendig
# A potential problem with the Cohrane-Orcutt procedure is that the residual sum of squares is not always minimized
#Det er nok derfor denne model ofte har lavere R^2

# Maximum likelihood tilgang
trend = time(salg.830345_train)
regmodel=lm(salg.830345_train~trend+new.prog.830345) # ordinær regression.
dtx = residuals(lm (new.prog.830345~time(new.prog.830345)))
regmodel= lm(salg.830345_train~trend+dtx) # ordinær regression med detrended x, dtx.
summary(regmodel) 
acf2(resid(regmodel)) # ACF og PACF af residualerne
ARIMA.regmodel = auto.arima(resid(regmodel)); ARIMA.regmodel

adjreg = sarima (salg.830345_train, 1,0,0, xreg=cbind(trend, dtx)) # Justeret regression med AR(1) residualer
adjreg # Resultater af justeret regression.
acf2(as.vector(resid(adjreg$fit)))# ACF for residualerne ligner hvid støj

#y_t=301.3316-0.1465*t+0.5458*dtx+e_t, hvor e_t=0.3368*e_{t-1}+w_t
#Ovenstående er modellen opstillet på samme måde som eksempel 8-2 fra kilden
#Men hvordan kommer man så videre med den???
